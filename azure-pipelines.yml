# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- noXamarin

variables:
- group: AndroidSigning

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    echo apksignerKeystoreFile: '$(keystore.secureFilePath)'
    echo apksignerKeystorePassword: '$[AndroidSigning.keystorePassword]'
    echo apksignerKeystoreAlias: '$[AndroidSigning.keystoreAlias]'
  displayName: 'Check vars and echo'

- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: NuGetCommand@2
  inputs:
      restoreSolution: '--/--.sln'
      noCache: true
  displayName: 'NuGet restore'

- script: |
    echo sdkmanager --list_installed
  displayName: check the installed 

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/DroidUpc2.csproj'

- task: DotNetCoreCLI@2
  displayName: dotnet build
  inputs:
    projects: '**/DroidUpc2.csproj'
    arguments: '-c Debug -f net8.0-android'

- task: Gradle@3
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    tasks: 'assembleDebug'


- task: DownloadSecureFile@1
  name: keystore
  displayName: 'Download keystore for signing'
  inputs:
    secureFile: 'RL.keystore'

- script: |
    echo Test: $(RL.keystore.secureFilePath)
  displayName: test keystore path


- task: AndroidSigning@3
  displayName: Sign APK
  inputs:
    apksignerKeystoreFile: RL.keystore
    apksignerKeystorePassword: '$[AndroidSigning.keystorePassword]'
    apksignerKeystoreAlias: '$[AndroidSigning.keystoreAlias]'
    apksignerArguments: '-verbose'